image: python:3.9

variables:
  TAGNAME: "continuous-${CI_COMMIT_BRANCH}"
  DOCKER_REPOSITORY: "${CI_REGISTRY}/cipres/${CI_PROJECT_NAME}"

stages:
  - prepare
  - build
  - release
  - docker

prepare:
  image: python:3.9
  stage: prepare
  script:
    - export VERSION=$(python -c 'import levior; print(levior.__version__)')
    - >
      echo "WHEEL_FILENAME=${CI_PROJECT_NAME}-${VERSION}-py3-none-any.whl"
      >> vars.env

    - >
      echo "WHEEL_ARTIFACT_URL=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/continuous-${CI_COMMIT_BRANCH}/${CI_PROJECT_NAME}-${VERSION}-py3-none-any.whl"
      >> vars.env

    - >
      echo "APPIMAGE_FILENAME=${CI_PROJECT_NAME}-${VERSION}-x86_64.AppImage"
      >> vars.env

    - >
      echo "APPIMAGE_LATEST_FILENAME=${CI_PROJECT_NAME}-latest-x86_64.AppImage"
      >> vars.env

    - >
      echo "APPIMAGE_ARTIFACT_URL=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/continuous-${CI_COMMIT_BRANCH}/${CI_PROJECT_NAME}-${VERSION}-x86_64.AppImage"
      >> vars.env

  artifacts:
    reports:
      dotenv: vars.env

build:
  stage: build
  only:
    - master
    - devel
    - zim
    - http-proxy
  script:
    - apt-get -y update
    - apt-get install -y fuse

    - python3 -m venv venv
    - source venv/bin/activate
    - python3 -m pip install --upgrade pip

    - pip install build wheel flake8
    - pip install '.[zim,test]'
    - flake8 levior

    - python -m build
    - pytest --cov --cov-report=term --cov-report=xml:coverage.xml -v -s tests

    - .gitlab/appimage-build

  coverage: '/TOTAL\s+\d+\s+\d+\s+(\d+%)/'
  artifacts:
    paths:
      - "*.AppImage"
      - dist/*.whl

    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

release:
  image: registry.gitlab.com/gitlab-org/release-cli
  stage: release
  only:
    - master
    - devel
  script:
    - apk add curl

    - >
      curl
      --request DELETE
      --header "JOB-TOKEN: $CI_JOB_TOKEN"
      --header "PRIVATE-TOKEN: ${GITLAB_PRIVATE_TOKEN}"
      "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/releases/${TAGNAME}"

    - >
     curl --header "JOB-TOKEN: $CI_JOB_TOKEN"
     --upload-file
     dist/${WHEEL_FILENAME}
     ${WHEEL_ARTIFACT_URL}

    - >
     curl --header "JOB-TOKEN: $CI_JOB_TOKEN"
     --upload-file
     ${APPIMAGE_FILENAME}
     ${APPIMAGE_ARTIFACT_URL}

    - >
      release-cli create
      --name release-${CI_COMMIT_SHA}
      --description README.md
      --tag-name $TAGNAME
      --ref $CI_COMMIT_SHA
      --assets-link
      "{\"name\": \"${WHEEL_FILENAME}\", \"filepath\": \"/${WHEEL_FILENAME}\", \"url\": \"${WHEEL_ARTIFACT_URL}\"}"
      --assets-link
      "{\"name\": \"${APPIMAGE_FILENAME}\", \"filepath\": \"/${APPIMAGE_LATEST_FILENAME}\", \"url\": \"${APPIMAGE_ARTIFACT_URL}\"}"

docker:
  image: docker:latest
  stage: docker
  services:
    - docker:dind
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\[docker\]/
      when: always
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - DOCKER_TAG="latest"

    - docker build -f Dockerfile -t $DOCKER_REPOSITORY:$DOCKER_TAG .
    - docker push $DOCKER_REPOSITORY:$DOCKER_TAG
